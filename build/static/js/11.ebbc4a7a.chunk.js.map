{"version":3,"file":"static/js/11.ebbc4a7a.chunk.js","mappings":"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","sources":["webpack://group1171276705/./src/views/app/components/ChatBot/microphone.module.css?1ceb","views/app/components/ChatBot/Microphone.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"sectionMicrophone\":\"sectionMicrophone_g1jGJ\",\"buttonMicrophone\":\"buttonMicrophone_Y2vSL\",\"iconMicrophone\":\"iconMicrophone_ruN9i\",\"bar\":\"bar_U7seq\",\"containerBar\":\"containerBar_LJ1Wu\",\"splot\":\"splot_BDU1s\",\"boxDelete\":\"boxDelete_XnIRo\",\"boxRecord\":\"boxRecord_HRwDY\",\"boxBar\":\"boxBar_KjFtS\",\"sectionRecord\":\"sectionRecord_ei4Vp\",\"textTime\":\"textTime_EIDic\",\"boxPlay\":\"boxPlay_PI4Ga\",\"buttonDelete\":\"buttonDelete_AlD0r\",\"iconDelete\":\"iconDelete_nazjh\",\"buttonPause\":\"buttonPause_x_tMM\",\"iconPause\":\"iconPause_u6uFU\",\"buttonPlay\":\"buttonPlay_PM76P\",\"iconPlay\":\"iconPlay_xTx_F\",\"buttonEnd\":\"buttonEnd_NQWBd\",\"iconEnd\":\"iconEnd_iNknl\",\"buttonRestart\":\"buttonRestart_oG8IZ\",\"iconRestart\":\"iconRestart_rF1tv\"};","// import Recorder from 'recorder-js'\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nimport styles from './microphone.module.css'\r\n//\r\n\r\nconst Microphone = ({ loadRecordVector }) => {\r\n  // record voice\r\n  //   const [recorder, setRecorder] = useState(null)\r\n  const [record, setRecord] = useState(false)\r\n//   const [audioContext, setAudioContext] = useState(null)\r\n//   const [analyser, setAnalyser] = useState(null)\r\n\r\n  const [mediaRecorder, setMediaRecorder] = useState(null)\r\n  const [audioChunks, setAudioChunks] = useState([])\r\n  const [volumeArray, setVolumeArray] = useState([])\r\n  //   const [isRecording, setIsRecording] = useState(false)\r\n\r\n  const [recordPlay, setRecordPlay] = useState(false)\r\n  //   const [paused, setPaused] = useState(false)\r\n  const [totalTime, setTotalTime] = useState(0)\r\n\r\n  // Nuevo estado para el valor máximo observado\r\n//   const [maxAmplitude, setMaxAmplitude] = useState(0)\r\n\r\n  const [intervalId0, setIntervalId0] = useState(null)\r\n  const [intervalId1, setIntervalId1] = useState(null)\r\n\r\n  \r\n  useEffect(() => {\r\n    const initializeAudio = async () => {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\r\n      const audioContext = new (window.AudioContext ||\r\n        window.webkitAudioContext)()\r\n      const analyser = audioContext.createAnalyser()\r\n      const microphone = audioContext.createMediaStreamSource(stream)\r\n\r\n      microphone.connect(analyser)\r\n      analyser.connect(audioContext.destination)\r\n\r\n      analyser.fftSize = 256\r\n      analyser.smoothingTimeConstant = 0.3\r\n\r\n    //   setAudioContext(audioContext)\r\n    //   setAnalyser(analyser)\r\n\r\n      const mediaRecorder = new MediaRecorder(stream)\r\n\r\n      mediaRecorder.ondataavailable = (event) => {\r\n        if (event.data.size > 0) {\r\n          setAudioChunks((chunks) => [...chunks, event.data])\r\n        }\r\n      }\r\n\r\n      mediaRecorder.onstop = () => {\r\n        // Aquí puedes realizar acciones adicionales después de detener la grabación si es necesario\r\n        console.log('Grabación completada', audioChunks)\r\n\r\n        // Concatenar todos los fragmentos en un solo Blob\r\n        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' })\r\n\r\n        // Crear una URL del Blob\r\n        const audioUrl = URL.createObjectURL(audioBlob)\r\n\r\n        // Puedes usar 'audioUrl' para reproducir el audio, enviarlo al servidor, etc.\r\n        console.log('URL del audio:', audioUrl)\r\n      }\r\n\r\n      setMediaRecorder(mediaRecorder)\r\n\r\n      const dataArray = new Uint8Array(analyser.fftSize)\r\n\r\n      const updateVolume = () => {\r\n        analyser.getByteFrequencyData(dataArray)\r\n\r\n        // Tomar un conjunto específico de frecuencias que representen el rango de volumen deseado\r\n        const startFrequency = 20 // Puedes ajustar estos valores según sea necesario\r\n        const endFrequency = 2000\r\n\r\n        // Calcular el volumen promedio en el rango de frecuencias\r\n        const relevantData = dataArray.slice(\r\n          (startFrequency * analyser.fftSize) / audioContext.sampleRate,\r\n          (endFrequency * analyser.fftSize) / audioContext.sampleRate\r\n        )\r\n\r\n        // Calcular la suma de amplitudes en lugar de promedio\r\n        const sumAmplitude = relevantData.reduce((sum, value) => sum + value, 0)\r\n\r\n        // Normalizar el valor a un rango de 0 a 100\r\n        const normalizedVolume =\r\n          (sumAmplitude / (255 * relevantData.length)) * 100\r\n\r\n        // console.log('Volumen actual:', normalizedVolume)\r\n        setVolumeArray((prevVolumeArray) => [\r\n          ...prevVolumeArray,\r\n          normalizedVolume\r\n        ])\r\n      }\r\n\r\n      const intervalId0 = setInterval(() => {\r\n        if (recordPlay) {\r\n          setTotalTime((prevTime) => prevTime + 1)\r\n        }\r\n      }, 1000)\r\n\r\n      const intervalId1 = setInterval(() => {\r\n        if (recordPlay) {\r\n          updateVolume()\r\n        }\r\n      }, 300)\r\n\r\n      setIntervalId0(intervalId0) // Guarda el intervalId0 en el estado\r\n      setIntervalId1(intervalId1) // Guarda el intervalId1 en el estado\r\n\r\n      return () => {\r\n        clearInterval(intervalId0)\r\n        clearInterval(intervalId1)\r\n        audioContext.close()\r\n        mediaRecorder.stop()\r\n      }\r\n    }\r\n\r\n    initializeAudio()\r\n  }, [ recordPlay])\r\n\r\n  useEffect(() => {\r\n    if (!recordPlay) {\r\n      clearInterval(intervalId0)\r\n      clearInterval(intervalId1)\r\n    }\r\n  }, [recordPlay])\r\n\r\n  //   useEffect(() => {\r\n  //     // Actualizar el contador de tiempo cada segundo\r\n  //     const intervalId = setInterval(() => {\r\n  //       if (recordPlay) {\r\n  //         setTotalTime((prevTime) => prevTime + 1)\r\n  //       }\r\n  //     }, 1000)\r\n\r\n  //     return () => clearInterval(intervalId)\r\n  //   }, [recordPlay])\r\n\r\n  const recordStart = () => {\r\n    // if (!mediaRecorder) {\r\n    //     initializeAudio(); // Inicializar el micrófono si aún no está inicializado\r\n    //   }\r\n\r\n    if (mediaRecorder) {\r\n      setAudioChunks([])\r\n      setVolumeArray([])\r\n\r\n      mediaRecorder.start()\r\n\r\n      setRecord(true)\r\n      setRecordPlay(true)\r\n\r\n      // Actualizar cada segundo\r\n      //   const intervalId = setInterval(() => {\r\n      //     analyzeVolume()\r\n      //   }, 1000)\r\n\r\n      // Detener la grabación después de cierto tiempo (ajusta según tus necesidades)\r\n      setTimeout(() => {\r\n        recordEnd()\r\n        // clearInterval(intervalId)\r\n      }, 1000000) // Detener después de 1000 segundos (ajusta según tus necesidades)\r\n    }\r\n  }\r\n\r\n  const recordEnd = async () => {\r\n    if (mediaRecorder) {\r\n      mediaRecorder.stop()\r\n      setRecord(false)\r\n      setTotalTime(0)\r\n\r\n    //   const audioBlob = new Blob(audioChunks, { type: 'audio/wav' })\r\n\r\n    //   const isoTime = new Date().toISOString()\r\n    //   const formattedTime = isoTime.replace(/\\.\\d{3}Z$/, '')\r\n    //   const fileName = `record-${formattedTime}.wav`\r\n\r\n    //   const arrayBuffer = await audioBlob.arrayBuffer()\r\n    //   const formData = new FormData()\r\n    //   formData.append(\r\n    //     'image',\r\n    //     new Blob([arrayBuffer], { type: 'audio/wav' }),\r\n    //     fileName\r\n    //   )\r\n\r\n    //   console.log('acc', audioChunks)\r\n    //   loadRecordVector(formData, volumeArray)\r\n    }\r\n  }\r\n\r\n  const recordPause = () => {\r\n    // Puedes implementar la pausa deteniendo la grabación y manteniendo los datos existentes\r\n    console.log('interval 1')\r\n\r\n    // clearInterval(intervalId1)\r\n    mediaRecorder.stop()\r\n    setRecordPlay(false)\r\n  }\r\n\r\n  const recordRestart = () => {\r\n    // Puedes implementar la reanudación iniciando una nueva grabación\r\n    mediaRecorder.start()\r\n    setRecordPlay(true)\r\n  }\r\n\r\n  const recordDelete = () => {\r\n    // Puedes implementar la reanudación iniciando una nueva grabación\r\n    mediaRecorder.stop()\r\n    setRecordPlay(false)\r\n    setRecord(false)\r\n    setTotalTime(0)\r\n  }\r\n\r\n  const formatTime = (seconds) => {\r\n    const minutes = Math.floor(seconds / 60)\r\n    const remainingSeconds = seconds % 60\r\n    return `${String(minutes).padStart(2, '0')}:${String(\r\n      remainingSeconds\r\n    ).padStart(2, '0')}`\r\n  }\r\n\r\n  //   const analyzeVolume = async () => {\r\n  //     console.log('eee', audioChunks)\r\n  //     if (audioChunks.length > 0) {\r\n  //       const audioContext = new (window.AudioContext ||\r\n  //         window.webkitAudioContext)()\r\n  //       const analyser = audioContext.createAnalyser()\r\n  //       analyser.fftSize = 256\r\n  //       analyser.smoothingTimeConstant = 0.3\r\n\r\n  //       const accumulatedAmplitudes = []\r\n\r\n  //       for (const audioChunk of audioChunks) {\r\n  //         const dataArray = new Uint8Array(analyser.fftSize)\r\n  //         const audioBuffer = await audioChunk.arrayBuffer()\r\n  //         const audioSource = audioContext.createBufferSource()\r\n  //         audioSource.buffer = await audioContext.decodeAudioData(audioBuffer)\r\n  //         audioSource.connect(analyser)\r\n\r\n  //         analyser.getByteTimeDomainData(dataArray)\r\n\r\n  //         const averageAmplitude =\r\n  //           Array.from(dataArray).reduce((sum, value) => sum + value, 0) /\r\n  //           dataArray.length\r\n\r\n  //         // Actualizar el valor máximo observado\r\n  //         setMaxAmplitude((prevMax) => Math.max(prevMax, averageAmplitude))\r\n\r\n  //         accumulatedAmplitudes.push(averageAmplitude)\r\n  //       }\r\n\r\n  //       const normalizedVolume = (maxAmplitude / 255) * 100\r\n\r\n  //       setVolumeArray((prevVolumeArray) => [\r\n  //         ...prevVolumeArray,\r\n  //         normalizedVolume\r\n  //       ])\r\n  //     }\r\n  //   }\r\n\r\n  return (\r\n    <div className={styles.sectionMicrophone}>\r\n      {!record ? (\r\n        <div className={styles.buttonMicrophone} onClick={recordStart}>\r\n          <svg\r\n            className={styles.iconMicrophone}\r\n            viewBox=\"0 0 24 24\"\r\n            height=\"24\"\r\n            width=\"24\"\r\n            preserveAspectRatio=\"xMidYMid meet\"\r\n            version=\"1.1\"\r\n            x=\"0px\"\r\n            y=\"0px\"\r\n            enableBackground=\"new 0 0 24 24\"\r\n          >\r\n            <path\r\n              fill=\"currentColor\"\r\n              d=\"M11.999,14.942c2.001,0,3.531-1.53,3.531-3.531V4.35c0-2.001-1.53-3.531-3.531-3.531 S8.469,2.35,8.469,4.35v7.061C8.469,13.412,9.999,14.942,11.999,14.942z M18.237,11.412c0,3.531-2.942,6.002-6.237,6.002 s-6.237-2.471-6.237-6.002H3.761c0,4.001,3.178,7.297,7.061,7.885v3.884h2.354v-3.884c3.884-0.588,7.061-3.884,7.061-7.885 L18.237,11.412z\"\r\n            ></path>\r\n          </svg>\r\n        </div>\r\n      ) : (\r\n        <div className={styles.sectionRecord}>\r\n          <div onClick={recordDelete} className={styles.buttonDelete}>\r\n            <svg\r\n              className={styles.iconDelete}\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              viewBox=\"0 0 16 22\"\r\n            >\r\n              <path\r\n                d=\"M5,0,3,2H0V4H16V2H13L11,0ZM15,5H1V19.5A2.5,2.5,0,0,0,3.5,22h9A2.5,2.5,0,0,0,15,19.5Z\"\r\n                fill=\"currentColor\"\r\n              ></path>\r\n            </svg>\r\n          </div>\r\n          {recordPlay ? (\r\n            <div className={styles.boxDelete}>\r\n              <div className={styles.textTime}>{formatTime(totalTime)}</div>\r\n              <div className={styles.bar}>\r\n                <div className={styles.containerBar}>\r\n                  {volumeArray.map((volume, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className={styles.splot}\r\n                      style={{\r\n                        height: `${volume || 1}%` // Asegurar que tenga al menos 1% para ser visible\r\n                      }}\r\n                    ></div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className={styles.boxBar}>\r\n              <div onClick={recordRestart} className={styles.buttonPlay}>\r\n                <svg\r\n                  className={styles.iconPlay}\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"16px\"\r\n                  height=\"18px\"\r\n                  viewBox=\"0 0 16 18\"\r\n                >\r\n                  <path\r\n                    d=\"M15.05,8.39,2,.32a1,1,0,0,0-1.53.85V16.83A1,1,0,0,0,2,17.7L15,10.1A1,1,0,0,0,15.05,8.39Z\"\r\n                    fill=\"currentColor\"\r\n                  ></path>\r\n                </svg>\r\n              </div>\r\n              <div className={styles.bar}>\r\n                <div className={styles.containerBar}>\r\n                  {volumeArray.map((volume, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className={styles.splot}\r\n                      style={{\r\n                        height: `${volume || 1}%` // Asegurar que tenga al menos 1% para ser visible\r\n                      }}\r\n                    ></div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div className={styles.textTime}>{formatTime(totalTime)}</div>\r\n            </div>\r\n          )}\r\n          <div className={styles.boxRecord}>\r\n            <div className={styles.boxPlay}>\r\n              {recordPlay ? (\r\n                <div onClick={recordPause} className={styles.buttonPause}>\r\n                  <svg\r\n                    className={styles.iconPause}\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    viewBox=\"0 0 32 32\"\r\n                  >\r\n                    <circle\r\n                      cx=\"16\"\r\n                      cy=\"16\"\r\n                      r=\"14.75\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2.5\"\r\n                    ></circle>\r\n                    <path\r\n                      d=\"M20.65,21.69V10.25H17.31V21.69Zm-9.3-11.44V21.69h3.34V10.25Z\"\r\n                      fill=\"currentColor\"\r\n                    ></path>\r\n                  </svg>\r\n                </div>\r\n              ) : (\r\n                <div onClick={recordRestart} className={styles.buttonRestart}>\r\n                  <svg\r\n                    className={styles.iconRestart}\r\n                    viewBox=\"0 0 24 24\"\r\n                    height=\"24\"\r\n                    width=\"24\"\r\n                    preserveAspectRatio=\"xMidYMid meet\"\r\n                    version=\"1.1\"\r\n                    x=\"0px\"\r\n                    y=\"0px\"\r\n                    enableBackground=\"new 0 0 24 24\"\r\n                  >\r\n                    <path\r\n                      fill=\"currentColor\"\r\n                      d=\"M11.999,14.942c2.001,0,3.531-1.53,3.531-3.531V4.35c0-2.001-1.53-3.531-3.531-3.531 S8.469,2.35,8.469,4.35v7.061C8.469,13.412,9.999,14.942,11.999,14.942z M18.237,11.412c0,3.531-2.942,6.002-6.237,6.002 s-6.237-2.471-6.237-6.002H3.761c0,4.001,3.178,7.297,7.061,7.885v3.884h2.354v-3.884c3.884-0.588,7.061-3.884,7.061-7.885 L18.237,11.412z\"\r\n                    ></path>\r\n                  </svg>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div onClick={recordEnd} className={styles.buttonEnd}>\r\n              <svg\r\n                className={styles.iconEnd}\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                viewBox=\"0 0 35 35\"\r\n              >\r\n                <path\r\n                  d=\"M17.5,0h0A17.51,17.51,0,0,1,35,17.5h0A17.51,17.51,0,0,1,17.5,35h0A17.51,17.51,0,0,1,0,17.5H0A17.51,17.51,0,0,1,17.5,0Z\"\r\n                  fill=\"currentColor\"\r\n                ></path>\r\n                <path\r\n                  d=\"M25.64,18.55,11.2,24.93a.86.86,0,0,1-1.13-.44.83.83,0,0,1-.06-.44l.48-4.11a1.36,1.36,0,0,1,1.24-1.19l7.51-.6a.16.16,0,0,0,.14-.16.16.16,0,0,0-.14-.14l-7.51-.6a1.36,1.36,0,0,1-1.24-1.19L10,12a.84.84,0,0,1,.74-.94.87.87,0,0,1,.45.06l14.44,6.38a.61.61,0,0,1,.31.79A.59.59,0,0,1,25.64,18.55Z\"\r\n                  fill=\"#fff\"\r\n                ></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Microphone\r\n"],"names":["_ref","loadRecordVector","record","setRecord","useState","mediaRecorder","setMediaRecorder","audioChunks","setAudioChunks","volumeArray","setVolumeArray","recordPlay","setRecordPlay","totalTime","setTotalTime","intervalId0","setIntervalId0","intervalId1","setIntervalId1","useEffect","async","stream","navigator","mediaDevices","getUserMedia","audio","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","createMediaStreamSource","connect","destination","fftSize","smoothingTimeConstant","MediaRecorder","ondataavailable","event","data","size","chunks","onstop","console","log","audioBlob","Blob","type","audioUrl","URL","createObjectURL","dataArray","Uint8Array","setInterval","prevTime","updateVolume","getByteFrequencyData","relevantData","slice","sampleRate","normalizedVolume","reduce","sum","value","length","prevVolumeArray","initializeAudio","clearInterval","recordEnd","stop","recordRestart","start","formatTime","seconds","minutes","Math","floor","remainingSeconds","concat","String","padStart","_jsx","className","styles","children","_jsxs","onClick","recordDelete","xmlns","viewBox","d","fill","map","volume","index","style","height","width","recordPause","cx","cy","r","stroke","strokeWidth","preserveAspectRatio","version","x","y","enableBackground","recordStart","setTimeout"],"sourceRoot":""}