{"version":3,"file":"static/js/824.0314f499.chunk.js","mappings":"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","sources":["views/app/pages/DashBoard/Pivot/component.jsx","../node_modules/react-dnd/src/hooks/useDrop/connectors.ts","../node_modules/react-dnd/src/internals/TargetConnector.ts","../node_modules/react-dnd/src/internals/DropTargetMonitorImpl.ts","../node_modules/react-dnd/src/hooks/useDrop/DropTargetImpl.ts","../node_modules/react-dnd/src/hooks/useDrop/useRegisteredDropTarget.ts","../node_modules/react-dnd/src/hooks/useDrop/useDropTarget.ts","../node_modules/react-dnd/src/hooks/useDrop/useAccept.ts","../node_modules/react-dnd/src/hooks/useDrop/useDrop.ts","../node_modules/react-dnd/src/hooks/useDrop/useDropTargetMonitor.ts","../node_modules/react-dnd/src/hooks/useDrop/useDropTargetConnector.ts","views/app/pages/DashBoard/Pivot/index.jsx"],"sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Component = ({children}) => {\r\n    return(\r\n        <div>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Component","import { useMemo } from 'react'\n\nimport type { TargetConnector } from '../../internals/index.js'\n\nexport function useConnectDropTarget(connector: TargetConnector) {\n\treturn useMemo(() => connector.hooks.dropTarget(), [connector])\n}\n","import { shallowEqual } from '@react-dnd/shallowequal'\nimport type { Backend, Identifier, Unsubscribe } from 'dnd-core'\nimport type { RefObject } from 'react'\n\nimport type { DropTargetOptions } from '../types/index.js'\nimport { isRef } from './isRef.js'\nimport type { Connector } from './SourceConnector.js'\nimport { wrapConnectorHooks } from './wrapConnectorHooks.js'\n\nexport class TargetConnector implements Connector {\n\tpublic hooks = wrapConnectorHooks({\n\t\tdropTarget: (node: any, options: DropTargetOptions) => {\n\t\t\tthis.clearDropTarget()\n\t\t\tthis.dropTargetOptions = options\n\t\t\tif (isRef(node)) {\n\t\t\t\tthis.dropTargetRef = node\n\t\t\t} else {\n\t\t\t\tthis.dropTargetNode = node\n\t\t\t}\n\t\t\tthis.reconnect()\n\t\t},\n\t})\n\n\tprivate handlerId: Identifier | null = null\n\t// The drop target may either be attached via ref or connect function\n\tprivate dropTargetRef: RefObject<any> | null = null\n\tprivate dropTargetNode: any\n\tprivate dropTargetOptionsInternal: DropTargetOptions | null = null\n\tprivate unsubscribeDropTarget: Unsubscribe | undefined\n\n\tprivate lastConnectedHandlerId: Identifier | null = null\n\tprivate lastConnectedDropTarget: any = null\n\tprivate lastConnectedDropTargetOptions: DropTargetOptions | null = null\n\tprivate readonly backend: Backend\n\n\tpublic constructor(backend: Backend) {\n\t\tthis.backend = backend\n\t}\n\n\tpublic get connectTarget(): any {\n\t\treturn this.dropTarget\n\t}\n\n\tpublic reconnect(): void {\n\t\t// if nothing has changed then don't resubscribe\n\t\tconst didChange =\n\t\t\tthis.didHandlerIdChange() ||\n\t\t\tthis.didDropTargetChange() ||\n\t\t\tthis.didOptionsChange()\n\n\t\tif (didChange) {\n\t\t\tthis.disconnectDropTarget()\n\t\t}\n\n\t\tconst dropTarget = this.dropTarget\n\t\tif (!this.handlerId) {\n\t\t\treturn\n\t\t}\n\t\tif (!dropTarget) {\n\t\t\tthis.lastConnectedDropTarget = dropTarget\n\t\t\treturn\n\t\t}\n\n\t\tif (didChange) {\n\t\t\tthis.lastConnectedHandlerId = this.handlerId\n\t\t\tthis.lastConnectedDropTarget = dropTarget\n\t\t\tthis.lastConnectedDropTargetOptions = this.dropTargetOptions\n\n\t\t\tthis.unsubscribeDropTarget = this.backend.connectDropTarget(\n\t\t\t\tthis.handlerId,\n\t\t\t\tdropTarget,\n\t\t\t\tthis.dropTargetOptions,\n\t\t\t)\n\t\t}\n\t}\n\n\tpublic receiveHandlerId(newHandlerId: Identifier | null): void {\n\t\tif (newHandlerId === this.handlerId) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.handlerId = newHandlerId\n\t\tthis.reconnect()\n\t}\n\n\tpublic get dropTargetOptions(): DropTargetOptions {\n\t\treturn this.dropTargetOptionsInternal\n\t}\n\tpublic set dropTargetOptions(options: DropTargetOptions) {\n\t\tthis.dropTargetOptionsInternal = options\n\t}\n\n\tprivate didHandlerIdChange(): boolean {\n\t\treturn this.lastConnectedHandlerId !== this.handlerId\n\t}\n\n\tprivate didDropTargetChange(): boolean {\n\t\treturn this.lastConnectedDropTarget !== this.dropTarget\n\t}\n\n\tprivate didOptionsChange(): boolean {\n\t\treturn !shallowEqual(\n\t\t\tthis.lastConnectedDropTargetOptions,\n\t\t\tthis.dropTargetOptions,\n\t\t)\n\t}\n\n\tpublic disconnectDropTarget() {\n\t\tif (this.unsubscribeDropTarget) {\n\t\t\tthis.unsubscribeDropTarget()\n\t\t\tthis.unsubscribeDropTarget = undefined\n\t\t}\n\t}\n\n\tprivate get dropTarget() {\n\t\treturn (\n\t\t\tthis.dropTargetNode || (this.dropTargetRef && this.dropTargetRef.current)\n\t\t)\n\t}\n\n\tprivate clearDropTarget() {\n\t\tthis.dropTargetRef = null\n\t\tthis.dropTargetNode = null\n\t}\n}\n","import { invariant } from '@react-dnd/invariant'\nimport type {\n\tDragDropManager,\n\tDragDropMonitor,\n\tIdentifier,\n\tListener,\n\tUnsubscribe,\n\tXYCoord,\n} from 'dnd-core'\n\nimport type { DropTargetMonitor } from '../types/index.js'\n\nlet isCallingCanDrop = false\n\nexport class DropTargetMonitorImpl implements DropTargetMonitor {\n\tprivate internalMonitor: DragDropMonitor\n\tprivate targetId: Identifier | null = null\n\n\tpublic constructor(manager: DragDropManager) {\n\t\tthis.internalMonitor = manager.getMonitor()\n\t}\n\n\tpublic receiveHandlerId(targetId: Identifier | null): void {\n\t\tthis.targetId = targetId\n\t}\n\n\tpublic getHandlerId(): Identifier | null {\n\t\treturn this.targetId\n\t}\n\n\tpublic subscribeToStateChange(\n\t\tlistener: Listener,\n\t\toptions?: { handlerIds?: Identifier[] },\n\t): Unsubscribe {\n\t\treturn this.internalMonitor.subscribeToStateChange(listener, options)\n\t}\n\n\tpublic canDrop(): boolean {\n\t\t// Cut out early if the target id has not been set. This should prevent errors\n\t\t// where the user has an older version of dnd-core like in\n\t\t// https://github.com/react-dnd/react-dnd/issues/1310\n\t\tif (!this.targetId) {\n\t\t\treturn false\n\t\t}\n\t\tinvariant(\n\t\t\t!isCallingCanDrop,\n\t\t\t'You may not call monitor.canDrop() inside your canDrop() implementation. ' +\n\t\t\t\t'Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor',\n\t\t)\n\n\t\ttry {\n\t\t\tisCallingCanDrop = true\n\t\t\treturn this.internalMonitor.canDropOnTarget(this.targetId)\n\t\t} finally {\n\t\t\tisCallingCanDrop = false\n\t\t}\n\t}\n\n\tpublic isOver(options?: { shallow?: boolean }): boolean {\n\t\tif (!this.targetId) {\n\t\t\treturn false\n\t\t}\n\t\treturn this.internalMonitor.isOverTarget(this.targetId, options)\n\t}\n\n\tpublic getItemType(): Identifier | null {\n\t\treturn this.internalMonitor.getItemType()\n\t}\n\n\tpublic getItem(): any {\n\t\treturn this.internalMonitor.getItem()\n\t}\n\n\tpublic getDropResult(): any {\n\t\treturn this.internalMonitor.getDropResult()\n\t}\n\n\tpublic didDrop(): boolean {\n\t\treturn this.internalMonitor.didDrop()\n\t}\n\n\tpublic getInitialClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getInitialClientOffset()\n\t}\n\n\tpublic getInitialSourceClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getInitialSourceClientOffset()\n\t}\n\n\tpublic getSourceClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getSourceClientOffset()\n\t}\n\n\tpublic getClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getClientOffset()\n\t}\n\n\tpublic getDifferenceFromInitialOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getDifferenceFromInitialOffset()\n\t}\n}\n","import type { DropTarget } from 'dnd-core'\n\nimport type { DropTargetMonitor } from '../../types/index.js'\nimport type { DropTargetHookSpec } from '../types.js'\n\nexport class DropTargetImpl<O, R, P> implements DropTarget {\n\tpublic constructor(\n\t\tpublic spec: DropTargetHookSpec<O, R, P>,\n\t\tprivate monitor: DropTargetMonitor<O, R>,\n\t) {}\n\n\tpublic canDrop() {\n\t\tconst spec = this.spec\n\t\tconst monitor = this.monitor\n\t\treturn spec.canDrop ? spec.canDrop(monitor.getItem(), monitor) : true\n\t}\n\n\tpublic hover() {\n\t\tconst spec = this.spec\n\t\tconst monitor = this.monitor\n\t\tif (spec.hover) {\n\t\t\tspec.hover(monitor.getItem(), monitor)\n\t\t}\n\t}\n\n\tpublic drop() {\n\t\tconst spec = this.spec\n\t\tconst monitor = this.monitor\n\t\tif (spec.drop) {\n\t\t\treturn spec.drop(monitor.getItem(), monitor)\n\t\t}\n\t\treturn\n\t}\n}\n","import type { TargetConnector } from '../../internals/index.js'\nimport { registerTarget } from '../../internals/index.js'\nimport type { DropTargetMonitor } from '../../types/index.js'\nimport type { DropTargetHookSpec } from '../types.js'\nimport { useDragDropManager } from '../useDragDropManager.js'\nimport { useIsomorphicLayoutEffect } from '../useIsomorphicLayoutEffect.js'\nimport { useAccept } from './useAccept.js'\nimport { useDropTarget } from './useDropTarget.js'\n\nexport function useRegisteredDropTarget<O, R, P>(\n\tspec: DropTargetHookSpec<O, R, P>,\n\tmonitor: DropTargetMonitor<O, R>,\n\tconnector: TargetConnector,\n): void {\n\tconst manager = useDragDropManager()\n\tconst dropTarget = useDropTarget(spec, monitor)\n\tconst accept = useAccept(spec)\n\n\tuseIsomorphicLayoutEffect(\n\t\tfunction registerDropTarget() {\n\t\t\tconst [handlerId, unregister] = registerTarget(\n\t\t\t\taccept,\n\t\t\t\tdropTarget,\n\t\t\t\tmanager,\n\t\t\t)\n\t\t\tmonitor.receiveHandlerId(handlerId)\n\t\t\tconnector.receiveHandlerId(handlerId)\n\t\t\treturn unregister\n\t\t},\n\t\t[\n\t\t\tmanager,\n\t\t\tmonitor,\n\t\t\tdropTarget,\n\t\t\tconnector,\n\t\t\taccept.map((a) => a.toString()).join('|'),\n\t\t],\n\t)\n}\n","import { useEffect, useMemo } from 'react'\n\nimport type { DropTargetMonitor } from '../../types/index.js'\nimport type { DropTargetHookSpec } from '../types.js'\nimport { DropTargetImpl } from './DropTargetImpl.js'\n\nexport function useDropTarget<O, R, P>(\n\tspec: DropTargetHookSpec<O, R, P>,\n\tmonitor: DropTargetMonitor<O, R>,\n) {\n\tconst dropTarget = useMemo(() => new DropTargetImpl(spec, monitor), [monitor])\n\tuseEffect(() => {\n\t\tdropTarget.spec = spec\n\t}, [spec])\n\treturn dropTarget\n}\n","import { invariant } from '@react-dnd/invariant'\nimport type { Identifier } from 'dnd-core'\nimport { useMemo } from 'react'\n\nimport type { DropTargetHookSpec } from '../types.js'\n\n/**\n * Internal utility hook to get an array-version of spec.accept.\n * The main utility here is that we aren't creating a new array on every render if a non-array spec.accept is passed in.\n * @param spec\n */\nexport function useAccept<O, R, P>(\n\tspec: DropTargetHookSpec<O, R, P>,\n): Identifier[] {\n\tconst { accept } = spec\n\treturn useMemo(() => {\n\t\tinvariant(spec.accept != null, 'accept must be defined')\n\t\treturn Array.isArray(accept) ? accept : [accept]\n\t}, [accept])\n}\n","import type { ConnectDropTarget } from '../../types/index.js'\nimport type { DropTargetHookSpec, FactoryOrInstance } from '../types.js'\nimport { useCollectedProps } from '../useCollectedProps.js'\nimport { useOptionalFactory } from '../useOptionalFactory.js'\nimport { useConnectDropTarget } from './connectors.js'\nimport { useDropTargetConnector } from './useDropTargetConnector.js'\nimport { useDropTargetMonitor } from './useDropTargetMonitor.js'\nimport { useRegisteredDropTarget } from './useRegisteredDropTarget.js'\n\n/**\n * useDropTarget Hook\n * @param spec The drop target specification (object or function, function preferred)\n * @param deps The memoization deps array to use when evaluating spec changes\n */\nexport function useDrop<\n\tDragObject = unknown,\n\tDropResult = unknown,\n\tCollectedProps = unknown,\n>(\n\tspecArg: FactoryOrInstance<\n\t\tDropTargetHookSpec<DragObject, DropResult, CollectedProps>\n\t>,\n\tdeps?: unknown[],\n): [CollectedProps, ConnectDropTarget] {\n\tconst spec = useOptionalFactory(specArg, deps)\n\tconst monitor = useDropTargetMonitor<DragObject, DropResult>()\n\tconst connector = useDropTargetConnector(spec.options)\n\tuseRegisteredDropTarget(spec, monitor, connector)\n\n\treturn [\n\t\tuseCollectedProps(spec.collect, monitor, connector),\n\t\tuseConnectDropTarget(connector),\n\t]\n}\n","import { useMemo } from 'react'\n\nimport { DropTargetMonitorImpl } from '../../internals/index.js'\nimport type { DropTargetMonitor } from '../../types/index.js'\nimport { useDragDropManager } from '../useDragDropManager.js'\n\nexport function useDropTargetMonitor<O, R>(): DropTargetMonitor<O, R> {\n\tconst manager = useDragDropManager()\n\treturn useMemo(() => new DropTargetMonitorImpl(manager), [manager])\n}\n","import { useMemo } from 'react'\n\nimport { TargetConnector } from '../../internals/index.js'\nimport type { DropTargetOptions } from '../../types/index.js'\nimport { useDragDropManager } from '../useDragDropManager.js'\nimport { useIsomorphicLayoutEffect } from '../useIsomorphicLayoutEffect.js'\n\nexport function useDropTargetConnector(\n\toptions: DropTargetOptions,\n): TargetConnector {\n\tconst manager = useDragDropManager()\n\tconst connector = useMemo(\n\t\t() => new TargetConnector(manager.getBackend()),\n\t\t[manager],\n\t)\n\tuseIsomorphicLayoutEffect(() => {\n\t\tconnector.dropTargetOptions = options || null\n\t\tconnector.reconnect()\n\t\treturn () => connector.disconnectDropTarget()\n\t}, [options])\n\treturn connector\n}\n","// DragAndDrop.js\r\nimport React, {useState, useEffect} from 'react';\r\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport styles  from './index.module.css';\r\nimport Component  from './component';\r\n\r\nimport { \r\n  addDashboard \r\n} from '@/actions/dashboard';\r\n\r\n\r\n\r\n\r\nconst DraggableItem = ({ id, index, moveItem, children, columnSize }) => {\r\n  const [isDropping, setIsDropping] = useState (false)\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  const [{ isDragging }, drag] = useDrag({\r\n    type: 'DRAGGABLE_ITEM',\r\n    item: { id, index },\r\n    collect: (monitor) => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n  });\r\n\r\n  const [, drop] = useDrop({\r\n    accept: 'DRAGGABLE_ITEM',\r\n    hover: (item, monitor) => {\r\n      console.log('itt', item)\r\n\r\n      if(!isDropping){\r\n        setIsDropping(true)\r\n        dispatch(addComponent(item))\r\n      }\r\n\r\n      // if(!item.index && !isDropping){\r\n      //   const _item = {\r\n      //     ...item,\r\n      //     index: 999\r\n      //   }\r\n\r\n      //   return;\r\n      // }\r\n\r\n      const draggedIndex = item.index;\r\n      const hoverIndex = index;\r\n\r\n      if (draggedIndex === hoverIndex) {\r\n        return;\r\n      }\r\n\r\n      const hoverBoundingRect = monitor.getClientOffset();\r\n      const hoverMiddleY = hoverBoundingRect.y + (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n      const clientOffset = monitor.getClientOffset();\r\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n\r\n      if (draggedIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n        return;\r\n      }\r\n\r\n      if (draggedIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n        return;\r\n      }\r\n\r\n      moveItem(draggedIndex, hoverIndex);\r\n      item.index = hoverIndex;\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div\r\n      ref={(node) => drag(drop(node))}\r\n      style={{\r\n        flex: columnSize ? `0 0 ${columnSize / 12 * 100}%` : undefined,\r\n        opacity: isDragging ? 0.5 : 1,\r\n        cursor: 'move',\r\n        border: '1px solid black',\r\n        padding: '8px',\r\n        margin: '8px',\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst DropTarget = ({ children }) => {\r\n  const [, drop] = useDrop({\r\n    accept: 'DRAGGABLE_ITEM',\r\n  });\r\n\r\n  return <div ref={drop}>{children}</div>;\r\n};\r\n\r\nconst Dashboard = ({ }) => {\r\n\r\n  const [items, setItems] = useState([]);\r\n  const { components } = useSelector((state) => state.component)\r\n\r\n\r\n  useEffect(() => {\r\n    // Cuando components cambia, actualiza el estado items\r\n    const newItems = components.map((component, index) => {\r\n      return {\r\n        id: index + 1,\r\n        columnSize: component.styles?.columnSize,\r\n        content: (\r\n          <div\r\n            key={index}\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              _selectedComponent(index);\r\n            }}\r\n          >\r\n            <Component>\r\n              {JSON.stringify(component)}\r\n            </Component>\r\n          </div>\r\n        ),\r\n      };\r\n    });\r\n    setItems(newItems);\r\n  }, [components]);\r\n\r\n\r\n\r\n\r\n  const handleClickGraph = () => {\r\n    setOpenMenuRight('new')\r\n    setOpenChatBot(true)\r\n  }\r\n\r\n\r\n  \r\n\r\n  const moveItem = (dragIndex, hoverIndex) => {\r\n    const draggedItem = items[dragIndex];\r\n    const updatedItems = [...items];\r\n    updatedItems.splice(dragIndex, 1);\r\n    updatedItems.splice(hoverIndex, 0, draggedItem);\r\n    setItems(updatedItems);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n      <DropTarget >\r\n        <div className=\"components-grids\">\r\n          {items.map((item, index) => (\r\n            \r\n            <DraggableItem\r\n              key={item.id}\r\n              id={item.id}\r\n              index={index}\r\n              moveItem={moveItem}\r\n              columnSize={item.columnSize}\r\n            >\r\n              {item.content}\r\n            </DraggableItem>\r\n          ))}\r\n        </div>\r\n      </DropTarget>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"names":["_ref","children","_jsx","useConnectDropTarget","connector","useMemo","hooks","dropTarget","TargetConnector","connectTarget","this","reconnect","didChange","didHandlerIdChange","didDropTargetChange","didOptionsChange","disconnectDropTarget","handlerId","lastConnectedHandlerId","lastConnectedDropTarget","lastConnectedDropTargetOptions","dropTargetOptions","unsubscribeDropTarget","backend","connectDropTarget","receiveHandlerId","newHandlerId","dropTargetOptionsInternal","options","shallowEqual","undefined","dropTargetNode","dropTargetRef","current","clearDropTarget","constructor","wrapConnectorHooks","node","isRef","isCallingCanDrop","DropTargetMonitorImpl","targetId","getHandlerId","subscribeToStateChange","listener","internalMonitor","canDrop","invariant","canDropOnTarget","isOver","isOverTarget","getItemType","getItem","getDropResult","didDrop","getInitialClientOffset","getInitialSourceClientOffset","getSourceClientOffset","getClientOffset","getDifferenceFromInitialOffset","manager","getMonitor","DropTargetImpl","spec","monitor","hover","drop","useRegisteredDropTarget","useDragDropManager","useEffect","useDropTarget","accept","Array","isArray","useAccept","useIsomorphicLayoutEffect","unregister","registerTarget","map","a","toString","join","useDrop","specArg","deps","useOptionalFactory","useDropTargetMonitor","getBackend","useDropTargetConnector","useCollectedProps","collect","DraggableItem","id","index","moveItem","columnSize","isDropping","setIsDropping","useState","dispatch","useDispatch","isDragging","drag","useDrag","type","item","console","log","addComponent","draggedIndex","hoverIndex","hoverBoundingRect","hoverMiddleY","y","bottom","top","hoverClientY","ref","style","flex","concat","opacity","cursor","border","padding","margin","DropTarget","_ref2","_ref3","items","setItems","components","useSelector","state","component","newItems","_component$styles","styles","content","onClick","e","stopPropagation","_selectedComponent","Component","JSON","stringify","dragIndex","draggedItem","updatedItems","splice","className"],"sourceRoot":""}