{"version":3,"file":"static/js/720.3eafa296.chunk.js","mappings":"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","sources":["views/app/pages/Settings/drive/trash/page.jsx"],"sourcesContent":["'use client'\r\nimport style from '../components/my-files/my-files.module.css'\r\n// import Image from 'next/image'\r\n\r\n// import Folder from '@/public/assets/Folder-figma.svg'\r\n// import Menu from '@/public/assets/Menu-figma.svg'\r\n// import Imagen from '@/public/assets/editor/assetManager/imagen.svg'\r\n// import Chevron from '../../../../../../../../assets/Vector 161 (Stroke).svg'\r\n// import ArrowUpWard from '../../../../../../../../assets/arrow-upward.svg'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useEffect, useState } from 'react'\r\nimport {\r\n  getDirectoriesVersions,\r\n  deleteFile\r\n  // deleteFolder\r\n} from '@/actions/assets'\r\n// import FolderOptions from '../../../../../app/[id]/editor/components/explorer/AssetsManager/FolderOptions'\r\n// import FileTrashOptions from '../../../../../app/[id]/editor/components/explorer/AssetsManager/FileTrashOptions'\r\n\r\nexport default function Page({ params }) {\r\n  const dispatch = useDispatch()\r\n  const { driveId } = params\r\n\r\n  const { directoriesTrash, loading, searchFiles } = useSelector(\r\n    (state) => state.assets\r\n  )\r\n  const isGettingFolder = loading?.GET_DIRECTORIES_VERSIONS === true\r\n\r\n  const [currentPath, setCurrentPath] = useState(driveId + '/')\r\n  const [filteredFolders, setFilteredFolders] = useState([])\r\n  const [folderOptions, setFolderOptions] = useState({})\r\n\r\n  // / / / / / / / / / / /    F U N C T I O N S    / / / / / / / / / / / / / / / / /\r\n\r\n  const handleFolderClick = (folderName) => {\r\n    setCurrentPath(folderName)\r\n  }\r\n\r\n  const handleToggleFolderOption = (index) => {\r\n    setFolderOptions((prevOptions) => {\r\n      const newOptions = { ...prevOptions }\r\n      newOptions[index] = !newOptions[index]\r\n      return newOptions\r\n    })\r\n  }\r\n  // const handleRestoreFolder = (path) => {\r\n  //   dispatch(deleteFolder(path))\r\n  // }\r\n  const handleDeleteFile = (path) => {\r\n    directoriesTrash?.Versions?.forEach((element) => {\r\n      if (element.Key === path)\r\n        dispatch(deleteFile({ path, VersionId: element.VersionId }))\r\n    })\r\n    directoriesTrash?.DeleteMarkers?.forEach((element) => {\r\n      if (element.Key === path)\r\n        dispatch(deleteFile({ path, VersionId: element.VersionId }))\r\n    })\r\n  }\r\n  const handleRestoreFile = (path, VersionId) => {\r\n    dispatch(deleteFile({ path, VersionId }))\r\n  }\r\n  const handleFolderClickBack = (folderName) => {\r\n    if (folderName === driveId + '/') {\r\n      setCurrentPath(folderName)\r\n      return\r\n    }\r\n    const arr = currentPath.split('/')\r\n    const index = arr.indexOf(folderName)\r\n    if (index !== -1) {\r\n      const newPath = arr.slice(0, index + 1)\r\n      setCurrentPath(newPath.join('/') + '/')\r\n    }\r\n  }\r\n\r\n  // / / / / / / / / / / / /    M E T O D O S    / / / / / / / / / / / / / / / / /\r\n\r\n  const renderFolders = (folders) => {\r\n    if (isGettingFolder && folders?.length === 0) {\r\n      return (\r\n        <p className={style.emptyFolderMessage}>Un momento, por favor...</p>\r\n      )\r\n    }\r\n    if (folders?.length === 0) {\r\n      return <p className={style.emptyFolderMessage}>Esta carpeta está vacía</p>\r\n    }\r\n    return folders?.map((directory, index) => {\r\n      const folderName = directory.Key.split('/').filter(Boolean).pop()\r\n      const isFile = /\\.(png|jpg|txt|jfif)$/i.test(folderName)\r\n\r\n      return (\r\n        <div key={index} className={style.drive_folder_container}>\r\n          <div\r\n            onClick={() =>\r\n              !isFile\r\n                ? handleFolderClick(directory.Key)\r\n                : handleRestoreFile(directory.Key, directory.VersionId)\r\n            }\r\n            className={style.drive_clickeable_folder_container}\r\n          >\r\n            <div className={style.drive_folder_title_container}>\r\n              {/* <Image src={isFile ? Imagen : Folder} priority /> */}\r\n              <p className={style.drive_folder_title}>{folderName}</p>\r\n            </div>\r\n\r\n            <div className={style.drive_folder_lastmodified_container}>1d</div>\r\n          </div>\r\n          <div className={style.fileRightSection}>\r\n            <span\r\n              className={style.fileOption}\r\n              onClick={() => handleToggleFolderOption(index)}\r\n            >\r\n              {/* <Image priority src={Menu} alt=\"\" /> */}\r\n            </span>\r\n          </div>\r\n          {folderOptions[index] &&\r\n            (isFile ? (\r\n              <div>\r\n\r\n                {/* <FileTrashOptions\r\n                  setShowFolderOption={(value) =>\r\n                    setFolderOptions((prevOptions) => ({\r\n                      ...prevOptions,\r\n                      [index]: value\r\n                    }))\r\n                  }\r\n                  handleDeleteFile={handleDeleteFile}\r\n                  handleRestoreFile={handleRestoreFile}\r\n                  folderName={folderName}\r\n                  directory={directory}\r\n                /> */}\r\n              </div>\r\n            ) : (\r\n              <div>\r\n              {/* // <FolderOptions\r\n              //   setShowFolderOption={(value) =>\r\n              //     setFolderOptions((prevOptions) => ({\r\n              //       ...prevOptions,\r\n              //       [index]: value\r\n              //     }))\r\n              //   }\r\n              //   handleDeleteFolder={handleRestoreFile}\r\n              //   folderName={folderName}\r\n              //   directory={directory.Key}\r\n              // /> */}\r\n              </div>\r\n            ))}\r\n        </div>\r\n      )\r\n    })\r\n  }\r\n\r\n  // / / / / / / / / / / /    U S E E F F E C T    / / / / / / / / / / / / / / / / /\r\n  useEffect(() => {\r\n    if (searchFiles !== '' && searchFiles !== undefined) {\r\n      const filtered = directoriesTrash?.DeleteMarkers?.filter(\r\n        (folder) =>\r\n          folder.Key.startsWith(currentPath) &&\r\n          folder.Key !== currentPath &&\r\n          folder.Key.toLowerCase().includes(searchFiles.toLowerCase())\r\n      )\r\n\r\n      // Ensure strict order based on the search string\r\n      const sortedFiltered = filtered.sort((a, b) => {\r\n        const indexA = a.Key.toLowerCase().indexOf(searchFiles.toLowerCase())\r\n        const indexB = b.Key.toLowerCase().indexOf(searchFiles.toLowerCase())\r\n        return indexA - indexB\r\n      })\r\n\r\n      setFilteredFolders(sortedFiltered)\r\n    } else {\r\n      // Reset filteredFolders when uploadSearch is empty\r\n      setFilteredFolders(\r\n        directoriesTrash?.DeleteMarkers?.filter(\r\n          (folder) =>\r\n            folder.Key.startsWith(currentPath) &&\r\n            folder.Key !== currentPath &&\r\n            (folder.Size === 0\r\n              ? folder.Key.split('/').length ===\r\n                currentPath.split('/').length + 1\r\n              : folder.Key.split('/').length === currentPath.split('/').length)\r\n        )\r\n      )\r\n    }\r\n  }, [currentPath, directoriesTrash, searchFiles])\r\n\r\n  useEffect(() => {\r\n    dispatch(getDirectoriesVersions({ Prefix: driveId }))\r\n  }, [])\r\n\r\n  return (\r\n    <div className={style.main_drive_page}>\r\n      <div className={style.drive_header}>\r\n        <div className={style.drive_header_left}>\r\n          <span className={style.drive_header_left_title_container}>\r\n            <p className={style.drive_header_left_title}>\r\n              Papelera de reciclaje\r\n            </p>\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className={style.drive_folders_main_container}>\r\n        <div className={style.drive_folders_title_container}>\r\n          <span\r\n            onClick={() => handleFolderClickBack(driveId)}\r\n            className={style.drive_folders_title}\r\n          >\r\n            Project\r\n          </span>\r\n          {currentPath\r\n            .split('/')\r\n            .slice(1, -1)\r\n            .map((folder, index) => (\r\n              <div\r\n                key={index}\r\n                style={{\r\n                  display: 'inline-flex',\r\n                  alignItems: 'center',\r\n                  gap: '9px'\r\n                }}\r\n              >\r\n                {/* <Image\r\n                  src={Chevron}\r\n                  style={{ transform: 'rotate(-90deg)' }}\r\n                  priority\r\n                /> */}\r\n                <span\r\n                  key={index}\r\n                  onClick={() => handleFolderClickBack(folder)}\r\n                  className={style.drive_folders_title}\r\n                >\r\n                  {folder}\r\n                </span>\r\n              </div>\r\n            ))}\r\n        </div>\r\n        <div className={style.drive_folders_container}>\r\n          <div className={style.drive_folders_filters_container}>\r\n            <div className={style.drive_folders_filters_title_container}>\r\n              <p className={style.drive_folders_filters_title}>Name</p>\r\n              {/* <Image src={ArrowUpWard} priority /> */}\r\n            </div>\r\n            <div className={style.drive_folder_size_container}>\r\n              <p className={style.drive_folders_filters_title}>Tamaño</p>\r\n              {/* <Image src={ArrowUpWard} priority /> */}\r\n            </div>\r\n            <div className={style.drive_folder_lastmodified_container}>\r\n              <p className={style.drive_folders_filters_title}>\r\n                Último modificado\r\n              </p>\r\n              {/* <Image src={ArrowUpWard} priority /> */}\r\n            </div>\r\n          </div>\r\n          {renderFolders(filteredFolders)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"names":["Page","_ref","params","dispatch","useDispatch","driveId","directoriesTrash","loading","searchFiles","useSelector","state","assets","isGettingFolder","GET_DIRECTORIES_VERSIONS","currentPath","setCurrentPath","useState","filteredFolders","setFilteredFolders","folderOptions","setFolderOptions","handleFolderClickBack","folderName","arr","split","index","indexOf","newPath","slice","join","useEffect","undefined","_directoriesTrash$Del2","sortedFiltered","DeleteMarkers","filter","folder","Key","startsWith","toLowerCase","includes","sort","a","b","_directoriesTrash$Del3","Size","length","getDirectoriesVersions","Prefix","_jsxs","className","style","main_drive_page","children","_jsx","drive_header","drive_header_left","drive_header_left_title_container","drive_header_left_title","drive_folders_main_container","drive_folders_title_container","onClick","drive_folders_title","map","display","alignItems","gap","drive_folders_container","drive_folders_filters_container","drive_folders_filters_title_container","drive_folders_filters_title","drive_folder_size_container","drive_folder_lastmodified_container","folders","emptyFolderMessage","directory","Boolean","pop","isFile","test","drive_folder_container","path","VersionId","deleteFile","handleFolderClick","handleRestoreFile","drive_clickeable_folder_container","drive_folder_title_container","drive_folder_title","fileRightSection","fileOption","prevOptions","newOptions","handleToggleFolderOption"],"sourceRoot":""}